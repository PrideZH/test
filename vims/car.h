#pragma once

#include <stdio.h>
#include <windows.h>

#define MAX_CAR_TYPE 24 // 车辆型号最大存储大小
#define MAX_CAR_MANUFACTURER 12 // 车辆厂商最大存储大小
#define MAX_CAR_GRADE 12 // 车辆级别最大存储大小
#define MAX_CAR_SEAT 4 // 车辆座位数最大存储长度
#define MAX_CAR_EMISSION 4 // 车辆排量最大存储长度
#define MAX_CAR_GEARBOX 12 // 车辆变速箱最大存储大小
#define MAX_CAR_COLOUR 12 // 车辆颜色最大存储大小
#define MAX_CAR_PRICE 12 // 车辆价格最大存储长度

enum SORT //排序类型
{
	ID_ORDER, 
	ID_INVERTED,
	SEAT_ORDER,
	SEAT_INVERTED,
	EMISSION_ORDER, 
	EMISSION_INVERTED,
	PRICE_ORDER,
	PRICE_INVERTED
};

enum INFO
{
	ID,
	TYPE,
	MANUFACTURER,
	GRADE,
	SEAT,
	EMISSION,
	GEARBOX,
	COLOUR,
	PRICE
};

typedef struct Car CAR, *PCAR;
struct Car
{
	int id; //编号
	char type[MAX_CAR_TYPE]; //型号
	char manufacturer[MAX_CAR_MANUFACTURER]; //厂商
	char grade[MAX_CAR_GRADE]; //级别
	int seat; //座位数
	float emission; //排量
	char gearbox[MAX_CAR_GEARBOX]; //变速箱
	char colour[MAX_CAR_COLOUR]; //颜色
	float price; //价格
	PCAR front, rear;
};
extern PCAR head;

union Data //存储车辆的三个基本信息
{
	int i;
	float f;
	char s[24];
};

/***********************************************************************
 * 说明：  从data.dat中读取车辆信息保存为双链表
 ***********************************************************************/
void load_car();

/***********************************************************************
 * 说明：  将所有车辆写入data.dat中
 ***********************************************************************/
void save_car();

/***********************************************************************
 * 说明：  添加车辆
 ***********************************************************************/
void add_car(PCAR head, PCAR car);

/***********************************************************************
 * 说明：  添加链表
 ***********************************************************************/
void add_list(PCAR list_head);

/***********************************************************************
 * 说明：  删除指定车辆
 ***********************************************************************/
void del_car(PCAR car);

/***********************************************************************
 * 说明：  获得车辆的数量
 * 返回值：车辆的数量
 ***********************************************************************/
int get_list_length(PCAR head);

/***********************************************************************
 * 说明：  获得唯一车辆编号
 * 返回值：车辆id
 ***********************************************************************/
int get_id();

/***********************************************************************
 * 说明：  获得指定下标车辆
 ***********************************************************************/
PCAR get_car(PCAR head, int index);

/***********************************************************************
 * 说明：  获得指定信息的车辆链表
 ***********************************************************************/
PCAR get_list(INFO info, Data data);

/***********************************************************************
 * 说明：  判断节点中指定数据是否相同
 * 参数：  car-要判断的节点
 *         info-数据类型
 *         data-与节点比较的数据
 * 返回值：1-相同 0-不同
 ***********************************************************************/
int matching(PCAR car, INFO info, Data data);

/***********************************************************************
 * 说明：  排序
 * 参数：  head-要排序的链表
 *         sort_type-要排序的数据
 ***********************************************************************/
void sort(PCAR head, SORT sort_type);

/***********************************************************************
 * 说明：  归并排序
 * 参数：  head-要排序的链表
 *         sort_type-要排序的数据
 * 返回值：分段完的链表
 ***********************************************************************/
PCAR merge_sort(PCAR head, SORT sort_type);

/***********************************************************************
 * 说明：  合并链表
 * 参数：  head1-链表1
 *         head2-链表2
 *         sort_type-要排序的数据
 * 返回值：合并完的链表
 ***********************************************************************/
PCAR merge(PCAR head1, PCAR head2, SORT sort_type);

/***********************************************************************
 * 说明：  比较数据大小
 * 参数：  head1-要比较的数据
 *         head2-要比较的数据
 *         sort_type-比较的数据类型
 * 返回值：数据比较结果
 ***********************************************************************/
int comparer(PCAR head1, PCAR head2, SORT sort_type);